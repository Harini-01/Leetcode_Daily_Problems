An array is considered special if every pair of its adjacent elements contains two numbers with different parity.

You are given an array of integers nums. Return true if nums is a special array, otherwise, return false.


Example 1:

Input: nums = [1]
Output: true
Explanation:
There is only one element. So the answer is true.

Example 2:

Input: nums = [2,1,4]
Output: true
Explanation:
There is only two pairs: (2,1) and (1,4), and both of them contain numbers with different parity. So the answer is true.

Example 3:
Input: nums = [4,3,1,6]
Output: false
Explanation:
nums[1] and nums[2] are both odd. So the answer is false.

 

Constraints:
1 <= nums.length <= 100
1 <= nums[i] <= 100


Code:
class Solution {
public:

    static int parity(int num)
    {
        if(num%2==0)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }

    bool isArraySpecial(vector<int>& nums) {
        int n=nums.size();
        if(n==1)
        {
            return true;
        }
        if(n==2)
        {
            if(parity(nums[0]) != parity(nums[1]))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

       for(int i=1;i<n-1;i++)
       {
            if((parity(nums[i])==parity(nums[i-1]))||(parity(nums[i])==parity(nums[i+1])))
            {
                return false;
            }
            
       }

       return true;
    }
};

T.C: O(N)
S.C: O(1)

Alternate Solution using bitwise operations:
for (int index = 0; index < nums.size() - 1; index++) {
            // Compare the parities of the current and next number
            if (nums[index] % 2 == nums[index + 1] % 2) {
                // If the two adjacent numbers have the same parity, return
                // false
                return false;
        }
